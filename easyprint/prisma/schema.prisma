generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  role          Role            @default(USER)
  photoURL      String?
  school        String?
  organization  String?
  phone         String?
  emailVerified Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String
  orders        Order[]
  messages      Message[]
  notifications Notification[]

  @@map("users")
}

model Order {
  id            String       @id @default(uuid())
  userId        String
  orderNumber   String       @unique @default(cuid())
  customerName  String
  customerEmail String
  customerPhone String?
  serviceType   ServiceType
  paperSize     PaperSize
  colorType     ColorType
  copies        Int          @default(1)
  pages         Int          @default(1)
  bindingType   BindingType?
  fileUrl       String?
  fileName      String?
  pricePerPage  Float
  totalPrice    Float
  status        OrderStatus  @default(PENDING)
  notes         String?
  adminNotes    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  completedAt   DateTime?
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
}

// ✅ NEW: Product Management
model Product {
  id              String           @id @default(uuid())
  name            String
  description     String?
  category        ProductCategory
  basePrice       Float
  attributes      Json // { size: [], paperType: [], finish: [], color: [] }
  pricingTiers    Json // { bulk: [], promo: [] }
  sampleImages    String[] // Array of Cloudinary URLs
  turnaroundTime  String // e.g., "1-day rush", "3-day regular"
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("products")
}

// ✅ NEW: Inventory Management
model Inventory {
  id            String   @id @default(uuid())
  itemName      String
  category      String // ink, paper, etc.
  quantity      Int
  unit          String // reams, bottles, pcs
  minStockLevel Int // Trigger alert when below this
  lastRestocked DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("inventory")
}

// ✅ NEW: Customer Messages/Inquiries
model Message {
  id        String        @id @default(uuid())
  userId    String
  subject   String
  message   String        @db.Text
  status    MessageStatus @default(PENDING)
  response  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // LOW_STOCK, ORDER_UPDATE, etc.
  title     String
  message   String
  data      Json?    // Additional data (e.g., inventory item details)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

// ✅ NEW: Payment Methods
model PaymentMethod {
  id          String   @id @default(uuid())
  name        String // GCash, PayPal, COD, Bank Transfer
  type        String // ewallet, bank, cash
  details     Json // { accountNumber, accountName, etc. }
  qrCodeUrl   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  school        String?         // School/Company name
  organization  String?         // Optional organization/department
  phone         String?         // Contact number

  @@map("payment_methods")
}

// ✅ Enums
enum Role {
  USER
  STAFF
  ADMIN
}

enum ServiceType {
  DOCUMENT_PRINTING
  RUSH_ID
  BINDING
  LAMINATION
}

enum PaperSize {
  A4
  A3
  LETTER
  LEGAL
  CUSTOM
}

enum ColorType {
  BLACK_AND_WHITE
  COLOR
  MIX
}

enum BindingType {
  NONE
  WIREBIND
  SOFT
  HARD
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  ON_DELIVERY
  COMPLETED
  CANCELLED
}

enum ProductCategory {
  PRINTING
  BINDING
  LAMINATION
  ID_PHOTO
  CUSTOM
}

enum MessageStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}